# https://circleci.com/docs/2.0/configuration-reference/

# NB https://circleci.com/docs/2.0/configuration-reference/#default-shell-options:
#  * CircleCI explicitly sets `set -eo pipefail`, which several of this project's
#    `run` steps rely on. The construct of `<failing-command> | <decorator-command>`
#    is used throughout, and needs to be present in any shell environment this
#    workflow evolves into.

version: 2.1

jobs:
  install_and_update_dependencies:
    docker:
      - image: cimg/python:3.12-node
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v3-dependencies-{{ checksum "uv.lock" }}
      - run:
          name: Install UV
          command: .circleci/install-uv.sh
      - run: make lambda-layers/DependenciesLayer/requirements.txt
      - persist_to_workspace:
          root: ~/repo/
          paths: [lambda-layers/DependenciesLayer/requirements.txt]
      - save_cache:
          when: on_success
          paths:
            - $HOME/.cache/uv
          key: v3-dependencies-{{ checksum "uv.lock" }}

  lint:
    docker:
      - image: cimg/python:3.12
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v3-dependencies-{{ checksum "uv.lock" }}
      - run:
          name: Install UV
          command: .circleci/install-uv.sh
      - run:
          name: Install dependencies
          command: uv sync
      - run:
          name: Run ruff check
          command: uv run ruff check .
      - run:
          name: Run ruff format check
          command: uv run ruff format --check .

  test:
    docker:
      - image: cimg/python:3.12
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v3-dependencies-{{ checksum "uv.lock" }}
      - run:
          name: Install UV
          command: .circleci/install-uv.sh
      - run:
          name: Install dependencies
          command: uv sync
      - run:
          name: Run pytest
          command: uv run pytest

  cdk_synth:
    docker:
      - image: cimg/python:3.12-node
    working_directory: ~/repo
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo/
      - restore_cache:
          keys:
            - v3-dependencies-{{ checksum "uv.lock" }}
            - v1-node-{{ checksum "package.json" }}
      - run:
          name: Install UV
          command: .circleci/install-uv.sh
      - run:
          name: Install Python dependencies
          command: uv sync
      - run:
          name: Install Node.js dependencies
          command: npm install
      - run:
          name: CDK synth
          command: npx cdk synth
      - save_cache:
          when: on_success
          paths:
            - node_modules
          key: v1-node-{{ checksum "package.json" }}
      - persist_to_workspace:
          root: ~/repo/
          paths: [cdk.out/]

  cdk_deploy:
    docker:
      - image: cimg/python:3.12-node
    working_directory: ~/repo/
    parameters:
      dc-environment:
        type: enum
        enum: [development, staging, production]
    environment:
      DC_ENVIRONMENT: <<parameters.dc-environment>>
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo/
      - restore_cache:
          keys:
            - v3-dependencies-{{ checksum "uv.lock" }}
            - v1-node-{{ checksum "package.json" }}
      - run:
          name: Install UV
          command: .circleci/install-uv.sh
      - run:
          name: Install Python dependencies
          command: uv sync
      - run:
          name: Install Node.js dependencies
          command: npm install
      - run:
          name: CDK deploy
          command: npx cdk deploy --require-approval never --all

workflows:
  version: 2
  test_build_deploy:
    jobs:
      - install_and_update_dependencies

      - lint:
          requires:
            - install_and_update_dependencies

      - test:
          requires:
            - install_and_update_dependencies

      - cdk_synth:
          requires:
            - install_and_update_dependencies
            - lint
            - test

      # This deployment tracks the tip of the master branch in Github. It is not intended
      # to block staging (hence production) deployments: staging is the testing ground for
      # production. This deployment is intended to give developers a target in their main
      # AWS account that they can debug against, read its logs, etc, without having to escalate
      # their access to the staging account. This deployment should not be modified manually,
      # but only through commits which also reach staging and then production.
      - cdk_deploy:
          name: cdk_deploy_development
          dc-environment: development
          requires:
            - cdk_synth
          context: [deployment-development-lgsf]
          filters: { branches: { only: [main, master] } }
